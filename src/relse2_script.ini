load sections .text,.data,.rodata,.bss,.got.plt,.plt,.got,.data.rel.ro,.tdata
from file

starting from <main>

# Setting esp and ebp
ebp<32>:=0xffffcc28;
esp<32>:=0xffffcbc0;

# Setting callee-save registers
eax<32> := 0
edx<32> := 0
ecx<32> := 0

# The other registers are nondet (usually pushed and not used)
edi<32> := nondet
esi<32> := nondet
ebx<32> := nondet

#set direction flag to avoid explosion on rep stos
DF<1>:=0

# Set GS to avoid problems
gs_base<32> := 0xf7ab4700

#choosing the right ifunc
replace <memset> by
    jump at <__memset_ia32>

malloc_base<32> := 0x7f000000 # arbitrary value

replace <calloc> by
  caller<32> := @[esp, 4]
  nmemb<32> := @[esp + 4, 4]
  size<32> := @[esp + 8, 4]
  total<32> := size*nmemb
  eax := malloc_base
  #calloc initializes the memory with zeros
  for i<32> in 0 to total - 1 do
    @[malloc_base + i, 1] := 0
  end
  malloc_base := malloc_base + total
  esp := esp + 4
  jump at caller

replace <malloc> by
  caller<32> := @[esp, 4]
  size<32> := @[esp + 4, 4]
  eax := malloc_base
  malloc_base := malloc_base + size
  esp := esp + 4
  jump at caller

replace <free> by
  caller<32> := @[esp, 4]
  esp := esp + 4
  jump at caller

# end at the end of main
@[esp, 4] := 0xabcdef01 as end_main
cut at end_main

cut at <__libc_message>

reach all
