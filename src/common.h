#ifndef COMMON_H_
#define COMMON_H_

#include <sys/resource.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>

void printhex(unsigned char* buf, int len);

#ifdef GENSUPP
#define VALGRIND_MAKE_MEM_UNDEFINED NOP
char NOP(const void* addr, size_t size);
#endif

#ifndef GENSUPP
#include <valgrind/memcheck.h>  // used to annotate secrets in ct-grind
#endif

// microwalk
void Target(FILE* input, int testcaseId, int* targetInit);

// Pin notification functions.
// These functions (and their names) must not be optimized away by the compiler, so Pin can find and instrument them.
// The return values reduce the probability that the compiler uses these function in other places as no-ops (Visual C++ did do this in some experiments).
int PinNotifyTestcaseStart(int t);
int PinNotifyTestcaseEnd();
int PinNotifyStackPointer(uint64_t spMin, uint64_t spMax);
int PinNotifyAllocation(uint64_t address, uint64_t size);

// Reads the stack pointer base value and transmits it to Pin.
void ReadAndSendStackPointer();

// function used to annotate secrets in Abacus, see https://github.com/s3team/Abacus/
int abacus_make_symbolic(uint32_t argc, void **buffers, uint32_t *buflengths);

int thrash_cache();

/* IVs, plaintexts and keys of various lengths for block ciphers */

#ifdef IV12
#define IVLEN 12
static uint8_t iv[IVLEN] = { 0x07 };
#endif

#ifdef IV16
#define IVLEN 16
static uint8_t iv[IVLEN] = { 0x07 };
#endif

#ifdef KEY16
#define KEYLEN 16
static uint8_t skey[KEYLEN] = {
    0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
};
#endif

#ifdef KEY32
#define KEYLEN 32
static uint8_t skey[KEYLEN] = {
    0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
    0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
    0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff
};
#endif

#ifdef PLAINTEXT32
#define DATALEN 32
static uint8_t plaintext[DATALEN] = "Lorem ipsum dolor sit amet, cons";
#endif

#ifdef PLAINTEXT128
#define DATALEN 128
static uint8_t plaintext[DATALEN] =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque" \
    " sollicitudin ultrices enim. Aenean id odio imperdiet, ullamcorp";
#endif

#ifdef PLAINTEXT256
#define DATALEN 256
static uint8_t plaintext[DATALEN] =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque" \
    " sollicitudin ultrices enim. Aenean id odio imperdiet, ullamcorp" \
    "er ligula condimentum, volutpat felis. Aliquam lobortis, urna no" \
    "n rutrum pharetra, mauris eros fringilla ipsum, nec tempor quis.";
#endif

/* parameters for an RSA-1024 private key*/

#ifdef RSA1024

#define NLEN 128
const static uint8_t RSA_N[NLEN] = {
    0x92, 0x92, 0x75, 0x84, 0x53, 0x06, 0x3D, 0x80, 0x3D, 0xD6, 0x03, 0xD5,
    0xE7, 0x77, 0xD7, 0x88, 0x8E, 0xD1, 0xD5, 0xBF, 0x35, 0x78, 0x61, 0x90,
    0xFA, 0x2F, 0x23, 0xEB, 0xC0, 0x84, 0x8A, 0xEA, 0xDD, 0xA9, 0x2C, 0xA6,
    0xC3, 0xD8, 0x0B, 0x32, 0xC4, 0xD1, 0x09, 0xBE, 0x0F, 0x36, 0xD6, 0xAE,
    0x71, 0x30, 0xB9, 0xCE, 0xD7, 0xAC, 0xDF, 0x54, 0xCF, 0xC7, 0x55, 0x5A,
    0xC1, 0x4E, 0xEB, 0xAB, 0x93, 0xA8, 0x98, 0x13, 0xFB, 0xF3, 0xC4, 0xF8,
    0x06, 0x6D, 0x2D, 0x80, 0x0F, 0x7C, 0x38, 0xA8, 0x1A, 0xE3, 0x19, 0x42,
    0x91, 0x74, 0x03, 0xFF, 0x49, 0x46, 0xB0, 0xA8, 0x3D, 0x3D, 0x3E, 0x05,
    0xEE, 0x57, 0xC6, 0xF5, 0xF5, 0x60, 0x6F, 0xB5, 0xD4, 0xBC, 0x6C, 0xD3,
    0x4E, 0xE0, 0x80, 0x1A, 0x5E, 0x94, 0xBB, 0x77, 0xB0, 0x75, 0x07, 0x23,
    0x3A, 0x0B, 0xC7, 0xBA, 0xC8, 0xF9, 0x0F, 0x79
};

#define ELEN 3
const static uint8_t RSA_E[ELEN] = { 0x01, 0x00, 0x01 };

#define DLEN NLEN
const static uint8_t RSA_D[DLEN] = {
    0x24, 0xBF, 0x61, 0x85, 0x46, 0x87, 0x86, 0xFD, 0xD3, 0x03, 0x08, 0x3D,
    0x25, 0xE6, 0x4E, 0xFC, 0x66, 0xCA, 0x47, 0x2B, 0xC4, 0x4D, 0x25, 0x31,
    0x02, 0xF8, 0xB4, 0xA9, 0xD3, 0xBF, 0xA7, 0x50, 0x91, 0x38, 0x6C, 0x00,
    0x77, 0x93, 0x7F, 0xE3, 0x3F, 0xA3, 0x25, 0x2D, 0x28, 0x85, 0x58, 0x37,
    0xAE, 0x1B, 0x48, 0x4A, 0x8A, 0x9A, 0x45, 0xF7, 0xEE, 0x8C, 0x0C, 0x63,
    0x4F, 0x99, 0xE8, 0xCD, 0xDF, 0x79, 0xC5, 0xCE, 0x07, 0xEE, 0x72, 0xC7,
    0xF1, 0x23, 0x14, 0x21, 0x98, 0x16, 0x42, 0x34, 0xCA, 0xBB, 0x72, 0x4C,
    0xF7, 0x8B, 0x81, 0x73, 0xB9, 0xF8, 0x80, 0xFC, 0x86, 0x32, 0x24, 0x07,
    0xAF, 0x1F, 0xED, 0xFD, 0xDE, 0x2B, 0xEB, 0x67, 0x4C, 0xA1, 0x5F, 0x3E,
    0x81, 0xA1, 0x52, 0x1E, 0x07, 0x15, 0x13, 0xA1, 0xE8, 0x5B, 0x5D, 0xFA,
    0x03, 0x1F, 0x21, 0xEC, 0xAE, 0x91, 0xA3, 0x4D
};

#define PLEN NLEN/2
const static uint8_t RSA_P[PLEN] = {
    0xC3, 0x6D, 0x0E, 0xB7, 0xFC, 0xD2, 0x85, 0x22, 0x3C, 0xFB, 0x5A, 0xAB,
    0xA5, 0xBD, 0xA3, 0xD8, 0x2C, 0x01, 0xCA, 0xD1, 0x9E, 0xA4, 0x84, 0xA8,
    0x7E, 0xA4, 0x37, 0x76, 0x37, 0xE7, 0x55, 0x00, 0xFC, 0xB2, 0x00, 0x5C,
    0x5C, 0x7D, 0xD6, 0xEC, 0x4A, 0xC0, 0x23, 0xCD, 0xA2, 0x85, 0xD7, 0x96,
    0xC3, 0xD9, 0xE7, 0x5E, 0x1E, 0xFC, 0x42, 0x48, 0x8B, 0xB4, 0xF1, 0xD1,
    0x3A, 0xC3, 0x0A, 0x57
};

#define QLEN NLEN/2
const static uint8_t RSA_Q[QLEN] = {
    0xC0, 0x00, 0xDF, 0x51, 0xA7, 0xC7, 0x7A, 0xE8, 0xD7, 0xC7, 0x37, 0x0C,
    0x1F, 0xF5, 0x5B, 0x69, 0xE2, 0x11, 0xC2, 0xB9, 0xE5, 0xDB, 0x1E, 0xD0,
    0xBF, 0x61, 0xD0, 0xD9, 0x89, 0x96, 0x20, 0xF4, 0x91, 0x0E, 0x41, 0x68,
    0x38, 0x7E, 0x3C, 0x30, 0xAA, 0x1E, 0x00, 0xC3, 0x39, 0xA7, 0x95, 0x08,
    0x84, 0x52, 0xDD, 0x96, 0xA9, 0xA5, 0xEA, 0x5D, 0x9D, 0xCA, 0x68, 0xDA,
    0x63, 0x60, 0x32, 0xAF
};

/* CRT parameters */

#define DPLEN PLEN
const static uint8_t RSA_DP[DPLEN] = {
    0xC1, 0xAC, 0xF5, 0x67, 0x56, 0x42, 0x74, 0xFB, 0x07, 0xA0, 0xBB, 0xAD,
    0x5D, 0x26, 0xE2, 0x98, 0x3C, 0x94, 0xD2, 0x22, 0x88, 0xAC, 0xD7, 0x63,
    0xFD, 0x8E, 0x56, 0x00, 0xED, 0x4A, 0x70, 0x2D, 0xF8, 0x41, 0x98, 0xA5,
    0xF0, 0x6C, 0x2E, 0x72, 0x23, 0x6A, 0xE4, 0x90, 0xC9, 0x3F, 0x07, 0xF8,
    0x3C, 0xC5, 0x59, 0xCD, 0x27, 0xBC, 0x2D, 0x1C, 0xA4, 0x88, 0x81, 0x17,
    0x30, 0xBB, 0x57, 0x25
};

#define DQLEN QLEN
const static uint8_t RSA_DQ[DQLEN] = {
    0x49, 0x59, 0xCB, 0xF6, 0xF8, 0xFE, 0xF7, 0x50, 0xAE, 0xE6, 0x97, 0x7C,
    0x15, 0x55, 0x79, 0xC7, 0xD8, 0xAA, 0xEA, 0x56, 0x74, 0x9E, 0xA2, 0x86,
    0x23, 0x27, 0x2E, 0x4F, 0x7D, 0x05, 0x92, 0xAF, 0x7C, 0x1F, 0x13, 0x13,
    0xCA, 0xC9, 0x47, 0x1B, 0x5C, 0x52, 0x3B, 0xFE, 0x59, 0x2F, 0x51, 0x7B,
    0x40, 0x7A, 0x1B, 0xD7, 0x6C, 0x16, 0x4B, 0x93, 0xDA, 0x2D, 0x32, 0xA3,
    0x83, 0xE5, 0x83, 0x57
};

#define QINVLEN QLEN
const static uint8_t RSA_QINV[] = {
    0x9A, 0xE7, 0xFB, 0xC9, 0x95, 0x46, 0x43, 0x2D, 0xF7, 0x18, 0x96, 0xFC,
    0x23, 0x9E, 0xAD, 0xAE, 0xF3, 0x8D, 0x18, 0xD2, 0xB2, 0xF0, 0xE2, 0xDD,
    0x27, 0x5A, 0xA9, 0x77, 0xE2, 0xBF, 0x44, 0x11, 0xF5, 0xA3, 0xB2, 0xA5,
    0xD3, 0x36, 0x05, 0xAE, 0xBB, 0xCC, 0xBA, 0x7F, 0xEB, 0x9F, 0x2D, 0x2F,
    0xA7, 0x42, 0x06, 0xCE, 0xC1, 0x69, 0xD7, 0x4B, 0xF5, 0xA8, 0xC5, 0x0D,
    0x6F, 0x48, 0xEA, 0x08
};

#endif

/* plaintext and ciphertext encrypted with this key, PKCS#1 v1.5 padding */

#ifdef PKCS1_V15

static uint8_t ciphertext[NLEN] = {
    0x49, 0x6F, 0xFF, 0x4E, 0x31, 0x0B, 0x59, 0xE3, 0x67, 0x94, 0x9C, 0x6C,
    0xC3, 0x1C, 0xA2, 0x51, 0x98, 0x27, 0x6F, 0x0B, 0x86, 0xCB, 0xD2, 0x3F,
    0xE9, 0xCC, 0x56, 0xE4, 0xA5, 0x3D, 0x5E, 0xF2, 0x7C, 0xFB, 0x55, 0x5F,
    0x0D, 0xD3, 0xF2, 0x46, 0x71, 0x0A, 0xB1, 0xD8, 0xAD, 0xAB, 0x00, 0x21,
    0x23, 0x88, 0xE5, 0xA9, 0xEC, 0x4D, 0x2A, 0x8E, 0x4C, 0x79, 0x9E, 0x3B,
    0x3F, 0x95, 0xBF, 0x07, 0x16, 0x04, 0x41, 0x8C, 0xB1, 0x57, 0xAD, 0xE4,
    0x77, 0x4C, 0x58, 0x76, 0xE5, 0x6E, 0x50, 0xD1, 0x14, 0x68, 0xA0, 0x64,
    0x24, 0xE0, 0x3D, 0xE7, 0x67, 0x63, 0x3D, 0xA7, 0xA2, 0x9C, 0xEF, 0xAA,
    0xEB, 0xD7, 0x6D, 0x47, 0x25, 0x2F, 0xA9, 0x6A, 0xA6, 0xB7, 0xBF, 0x57,
    0xF9, 0xF3, 0x63, 0x9C, 0xEE, 0xD8, 0xE4, 0x22, 0xFE, 0xFA, 0xA6, 0xCD,
    0xC2, 0x4E, 0x8F, 0x93, 0x5D, 0x66, 0xAB, 0xC4
};

#define DATALEN (NLEN)-11
const static uint8_t plaintext[DATALEN] =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque" \
    " sollicitudin ultrices enim. Aenean id odio imperdiet";
#endif

/* plaintext and ciphertext encrypted with this key, OAEP padding with SHA-1 */

#ifdef OAEP

// see RFC8017: length(plaintext) <= length(modulus) - 2*length(SHA-1) - 2
#define DATALEN (NLEN)-42
const static uint8_t plaintext[DATALEN] =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque" \
    " sollicitudin ultrices";

static uint8_t ciphertext[NLEN] = {
    0x5D, 0x8F, 0x7C, 0xF5, 0x83, 0x3D, 0x42, 0xF1, 0xE8, 0xA9, 0x8A, 0x2C,
    0x02, 0x8B, 0x76, 0x3D, 0x98, 0x8B, 0xAE, 0x0E, 0xBD, 0x06, 0xEB, 0x1C,
    0xFD, 0x98, 0x7B, 0xD4, 0x2A, 0x0F, 0x37, 0x14, 0xFB, 0x73, 0xBE, 0x02,
    0x0C, 0xCE, 0x9D, 0x6B, 0x18, 0x4F, 0x33, 0xB7, 0x5E, 0xD2, 0x7F, 0x27,
    0xDE, 0x3D, 0x33, 0x4A, 0x47, 0x21, 0x37, 0x90, 0x80, 0xFA, 0x74, 0xE8,
    0xA5, 0xB7, 0x22, 0x74, 0xAC, 0x7E, 0xA7, 0x68, 0xBB, 0xFA, 0x06, 0xEA,
    0x31, 0x75, 0xF2, 0x34, 0xE1, 0x2C, 0x37, 0x2A, 0x28, 0xCB, 0xDF, 0xFA,
    0x2F, 0x11, 0xFB, 0xA8, 0xAC, 0x0C, 0xB9, 0x34, 0xF8, 0xD3, 0xD5, 0xBF,
    0x4C, 0x79, 0xBA, 0xE3, 0xE2, 0x20, 0x55, 0xFF, 0x4B, 0x4B, 0xD2, 0x13,
    0xE1, 0x21, 0x3F, 0x10, 0x80, 0xDC, 0x33, 0xF0, 0x64, 0x03, 0x44, 0x38,
    0xBC, 0xC9, 0x5F, 0xA2, 0x47, 0xAC, 0x33, 0x41
};
    
#endif

/* parameters for a P256 public and private key */

#ifdef ECDSA_P256

#define SIGLEN 64

#define DLEN 32
// private key
static const uint8_t ECDSA_D[] = {
    0xB7, 0xD7, 0xAB, 0x96, 0x3D, 0x56, 0x8D, 0x07, 0x62, 0x99, 0xA1, 0x49,
    0xE1, 0x06, 0xB8, 0xA4, 0xEE, 0xA3, 0xF6, 0x6C, 0xA3, 0xF8, 0xDD, 0x94,
    0x8A, 0xC4, 0xA7, 0x53, 0xD5, 0x84, 0x03, 0xF8
};

#define QLEN 65
// public key (Q = [d]G, where G is the generator of P256)
static const uint8_t ECDSA_Q[] = {
    0x04, 0x0C, 0x7F, 0xBC, 0xA0, 0x0E, 0xD9, 0xAB, 0xA7, 0xD6, 0xA7, 0x96,
    0xAE, 0x64, 0x95, 0x14, 0x42, 0x2C, 0x77, 0x4E, 0x79, 0x1E, 0xEE, 0x14,
    0x32, 0x7A, 0xBA, 0x48, 0x3A, 0xCE, 0x96, 0x5C, 0xAB, 0xAE, 0x0B, 0x01,
    0x5F, 0x49, 0xC2, 0xE2, 0x88, 0xF4, 0xB1, 0x64, 0xF0, 0x39, 0xDB, 0xE0,
    0x80, 0x68, 0x67, 0xFC, 0x72, 0x75, 0x50, 0xD2, 0x31, 0x27, 0xD6, 0x3D,
    0x22, 0x83, 0x40, 0xB2, 0xC3
};

// the hashed message being signed
static const uint8_t ECDSA_sha1[] = {
    0x83, 0x2E, 0xF7, 0xF6, 0xB2, 0x91, 0x60, 0x75, 0xA4, 0xEA, 0x6C, 0x2D,
    0xFD, 0x1B, 0xCC, 0x8D, 0x20, 0x67, 0x5D, 0x84
};

#endif

/* parameters for an Ed25519 public and private key */

#ifdef ED25519

#define DLEN 32
static const uint8_t Ed25519_D[] = {
    0x28, 0x17, 0x0F, 0xAA, 0x4D, 0xBD, 0x53, 0x0C, 0x69, 0xBC, 0x62, 0x53,
    0x89, 0xA8, 0xF0, 0x29, 0x79, 0xE5, 0xAD, 0x0D, 0x82, 0xD0, 0xCB, 0x59,
    0x70, 0x02, 0x36, 0x4E, 0xDF, 0xFE, 0x44, 0x87
};

#define QLEN 32
static const uint8_t Ed25519_Q[] = {
    0xFB, 0x25, 0x2F, 0xE2, 0xE0, 0xFE, 0x0F, 0x8D, 0xDA, 0x56, 0x9B, 0x9E,
    0x08, 0x1A, 0x6C, 0x04, 0x36, 0x05, 0xA0, 0xAF, 0x3A, 0x88, 0x2A, 0x32,
    0xC1, 0x24, 0x7D, 0xF0, 0x20, 0x95, 0x66, 0x50
};

static const uint8_t Ed25519_sha1[] = {
    0x83, 0x2E, 0xF7, 0xF6, 0xB2, 0x91, 0x60, 0x75, 0xA4, 0xEA, 0x6C, 0x2D,
    0xFD, 0x1B, 0xCC, 0x8D, 0x20, 0x67, 0x5D, 0x84
};

#endif

#ifdef VULNVALID

const static uint8_t P_minus_one[] = {
    0xC3, 0x6D, 0x0E, 0xB7, 0xFC, 0xD2, 0x85, 0x22, 0x3C, 0xFB, 0x5A, 0xAB,
    0xA5, 0xBD, 0xA3, 0xD8, 0x2C, 0x01, 0xCA, 0xD1, 0x9E, 0xA4, 0x84, 0xA8,
    0x7E, 0xA4, 0x37, 0x76, 0x37, 0xE7, 0x55, 0x00, 0xFC, 0xB2, 0x00, 0x5C,
    0x5C, 0x7D, 0xD6, 0xEC, 0x4A, 0xC0, 0x23, 0xCD, 0xA2, 0x85, 0xD7, 0x96,
    0xC3, 0xD9, 0xE7, 0x5E, 0x1E, 0xFC, 0x42, 0x48, 0x8B, 0xB4, 0xF1, 0xD1,
    0x3A, 0xC3, 0x0A, 0x56
};

const static uint8_t Q_minus_one[] = {
    0xC0, 0x00, 0xDF, 0x51, 0xA7, 0xC7, 0x7A, 0xE8, 0xD7, 0xC7, 0x37, 0x0C,
    0x1F, 0xF5, 0x5B, 0x69, 0xE2, 0x11, 0xC2, 0xB9, 0xE5, 0xDB, 0x1E, 0xD0,
    0xBF, 0x61, 0xD0, 0xD9, 0x89, 0x96, 0x20, 0xF4, 0x91, 0x0E, 0x41, 0x68,
    0x38, 0x7E, 0x3C, 0x30, 0xAA, 0x1E, 0x00, 0xC3, 0x39, 0xA7, 0x95, 0x08,
    0x84, 0x52, 0xDD, 0x96, 0xA9, 0xA5, 0xEA, 0x5D, 0x9D, 0xCA, 0x68, 0xDA,
    0x63, 0x60, 0x32, 0xAE
};

const static uint8_t E[] = { 0x01, 0x00, 0x01 };

const static uint8_t lcm[] = {
    0x49, 0x49, 0x3A, 0xC2, 0x29, 0x83, 0x1E, 0xC0, 0x1E, 0xEB, 0x01, 0xEA,
    0xF3, 0xBB, 0xEB, 0xC4, 0x47, 0x68, 0xEA, 0xDF, 0x9A, 0xBC, 0x30, 0xC8,
    0x7D, 0x17, 0x91, 0xF5, 0xE0, 0x42, 0x45, 0x75, 0x6E, 0xD4, 0x96, 0x53,
    0x61, 0xEC, 0x05, 0x99, 0x62, 0x68, 0x84, 0xDF, 0x79, 0xB6, 0xB5, 0x07,
    0x38, 0x98, 0x5C, 0xE7, 0x6B, 0xD6, 0x6F, 0xAA, 0x67, 0xE3, 0xAA, 0xAD,
    0x60, 0xA7, 0x75, 0xD5, 0x81, 0xD5, 0x50, 0x05, 0x2B, 0xAC, 0xE2, 0x76,
    0x78, 0xD5, 0x4D, 0xE4, 0x24, 0xE4, 0x9C, 0xB3, 0x66, 0x7C, 0x5D, 0x0B,
    0x86, 0x7A, 0x30, 0x43, 0x5A, 0x05, 0x42, 0x0C, 0x3D, 0xDF, 0xE4, 0x08,
    0x30, 0x4B, 0xC2, 0x98, 0xB0, 0x32, 0x2E, 0x4C, 0x6F, 0xEF, 0x24, 0x21,
    0x39, 0x59, 0x89, 0xBD, 0x8B, 0x33, 0xFB, 0x41, 0x73, 0xE9, 0x6D, 0x3E,
    0x88, 0x46, 0x36, 0x87, 0x95, 0x6A, 0xE9, 0x3A
};

const static uint8_t mont_ctx_operand[] = {0x01, 0x00, 0x00, 0x00, 0x00};

const static uint8_t P[] = {
    0xC3, 0x6D, 0x0E, 0xB7, 0xFC, 0xD2, 0x85, 0x22, 0x3C, 0xFB, 0x5A, 0xAB,
    0xA5, 0xBD, 0xA3, 0xD8, 0x2C, 0x01, 0xCA, 0xD1, 0x9E, 0xA4, 0x84, 0xA8,
    0x7E, 0xA4, 0x37, 0x76, 0x37, 0xE7, 0x55, 0x00, 0xFC, 0xB2, 0x00, 0x5C,
    0x5C, 0x7D, 0xD6, 0xEC, 0x4A, 0xC0, 0x23, 0xCD, 0xA2, 0x85, 0xD7, 0x96,
    0xC3, 0xD9, 0xE7, 0x5E, 0x1E, 0xFC, 0x42, 0x48, 0x8B, 0xB4, 0xF1, 0xD1,
    0x3A, 0xC3, 0x0A, 0x57
};

const static uint8_t exponent[] = {
    0x61, 0xB6, 0x87, 0x5B, 0xFE, 0x69, 0x42, 0x91, 0x1E, 0x7D, 0xAD, 0x55,
    0xD2, 0xDE, 0xD1, 0xEC, 0x16, 0x00, 0xE5, 0x68, 0xCF, 0x52, 0x42, 0x54,
    0x3F, 0x52, 0x1B, 0xBB, 0x1B, 0xF3, 0xAA, 0x80, 0x7E, 0x59, 0x00, 0x2E,
    0x2E, 0x3E, 0xEB, 0x76, 0x25, 0x60, 0x11, 0xE6, 0xD1, 0x42, 0xEB, 0xCB,
    0x61, 0xEC, 0xF3, 0xAF, 0xF7, 0xE2, 0x12, 0x04, 0x45, 0xDA, 0x78, 0xE8,
    0x9D, 0x61, 0x85, 0x2B
};

const static uint8_t base[] = {
    0x86, 0xC9, 0xAC, 0x53, 0xAA, 0x15, 0x06, 0x76, 0xD9, 0x28, 0x6B, 0xE8,
    0x77, 0x1E, 0x0D, 0x6E, 0x55, 0x9A, 0x4E, 0x8A, 0x4C, 0x9D, 0x57, 0x66,
    0x2C, 0xEF, 0xE8, 0x7F, 0x89, 0x30, 0x21, 0x01, 0xFE, 0x3D, 0x2D, 0x21,
    0x7A, 0xAC, 0xBD, 0x56, 0x55, 0xC4, 0x99, 0xE7, 0xB2, 0x05, 0x6D, 0x9F,
    0x81, 0x19, 0x0A, 0x85, 0xDD, 0x80, 0xA5, 0x1B, 0x67, 0x6C, 0x44, 0xE9,
    0x71, 0x10, 0x1E, 0xC4
};

#endif

#endif // COMMON_H_
