# Initializations

esp := 0x32ff5c

load sections .text, .rdata, .data from file

lastError<32> := nondet

inputState<32> := 0
outputState<8> := 0
isUppercaseAlphabet<1> := true
isLowercaseAlphabet<1> := true

# Import table

@[0x402000, 4] := 0x7b442e00 as ReadFile
@[0x402004, 4] := 0x7b43111c as FindFirstFileA
@[0x402008, 4] := 0x7b432aa8 as SetConsoleTextAttribute
@[0x40200c, 4] := 0x7b431a7c as GetStdHandle
@[0x402010, 4] := 0x7b43b540 as WriteConsoleA
@[0x402014, 4] := 0x7b442ef0 as WriteFile
@[0x402018, 4] := 0x7b431180 as FindNextFileA
@[0x40201c, 4] := 0x7b43ac40 as ReadConsoleA
@[0x402020, 4] := 0x7b432ae4 as SetCurrentDirectoryA
@[0x402024, 4] := 0x7b43175c as GetLastError
@[0x402028, 4] := 0x7b430a64 as CreateFileA
@[0x40202c, 4] := 0x7b430884 as CloseHandle
@[0x402030, 4] := 0x7b454890 as ExitProcess

# Dynamic function mocks

## ReadFile

replace ReadFile by
  caller<32> := @[esp, 4]
  hFile<32> := @[esp + 4, 4]
  lpBuffer<32> := @[esp + 8, 4]
  nNumberOfBytesToRead<32> := @[esp + 12, 4]
  lpNumberOfBytesRead<32> := @[esp + 16, 4]
  lpOverlapped<32> := @[esp + 20, 4]
  nNumberOfBytesRead<32> := 0
  # assume ReadFile is only used to read in "latin_alphabet.txt.encrypted"
  assert hFile = 0x34
  assert lpOverlapped = 0
  if inputState + nNumberOfBytesToRead < 26 then
    nNumberOfBytesRead := nNumberOfBytesToRead
  else
    nNumberOfBytesRead := 26 - inputState
  end
  for i<32> in 0 to nNumberOfBytesRead - 1 do
    @[lpBuffer + i] := case inputState is
      00: 0x0f
      01: 0xce
      02: 0x60
      03: 0xbc
      04: 0xe6
      05: 0x2f
      06: 0x46
      07: 0xea
      08: 0x07
      09: 0xca
      10: 0x62
      11: 0xbd
      12: 0x67
      13: 0xef
      14: 0x26
      15: 0xda
      16: 0x1f
      17: 0xc6
      18: 0x64
      19: 0xbe
      20: 0xe7
      21: 0xaf
      22: 0x06
      23: 0xca
      24: 0x17
      25: 0xc2
       _: @[lpBuffer + i]
    inputState := inputState + 1
  end
  # write the result in the pointer passed in argument, if any
  if lpNumberOfBytesRead <> 0 then
    @[lpNumberOfBytesRead, 4] := nNumberOfBytesRead
  end
  # return a non zero value
  eax := 1
  esp := esp + 4
  jump at caller

## FindFirstFileA

replace FindFirstFileA by
  caller<32> := @[esp, 4]
  lpFileName<32> := @[esp + 4, 4]
  lpFindFileData<32> := @[esp + 8, 4]
  assert @[lpFileName, 12] = "*.encrypted"z
  assert lpFindFileData <> 0
  @[lpFindFileData + 44, 29] := "latin_alphabet.txt.encrypted"z
  eax := 0x110a58
  esp := esp + 4
  jump at caller

## SetConsoleTextAttribute

replace SetConsoleTextAttribute by
  caller<32> := @[esp, 4]
  # we ignore hConsoleOutput
  # we ignore wAttributes
  eax := 1
  esp := esp + 4
  jump at caller
  
## GetStdHandle

replace GetStdHandle by
  caller<32> := @[esp, 4]
  nStdHandle<32> := @[esp + 4, 4]
  case nStdHandle is
    -10: eax := 23
    -11: eax := 27
      _: assert false
  end
  esp := esp + 4
  jump at caller

## WriteConsoleA

replace WriteConsoleA by
   caller<32> := @[esp, 4]
   hConsoleOutput<32> := @[esp + 4, 4]
   # we ignore lpBuffer
   nNumberOfCharsToWrite<32> := @[esp + 12, 4]
   lpNumberOfCharsWritten<32> := @[esp + 16, 4]
   lpReserved<32> := @[esp + 20, 4]
   assert hConsoleOutput = 27
   assert lpReserved = 0
   if lpNumberOfCharsWritten <> 0 then
     @[lpNumberOfCharsWritten, 4] := nNumberOfCharsToWrite
   end
   eax := 1
   esp := esp + 4
   jump at caller

## WriteFile

replace WriteFile by
  caller<32> := @[esp, 4]
  hFile<32> := @[esp + 4, 4]
  lpBuffer<32> := @[esp + 8, 4]
  nNumberOfBytesToWrite<32> := @[esp + 12, 4]
  lpNumberOfBytesWritten<32> := @[esp + 16, 4]
  lpOverlapped<32> := @[esp + 20, 4]
  # assume WriteFile is only used to read in "latin_alphabet.txt"
  assert hFile = 0x38
  assert lpOverlapped = 0
  for i<32> in 0 to nNumberOfBytesToWrite - 1 do
     isUppercaseAlphabet := isUppercaseAlphabet &&
     		     	    @[lpBuffer + i] = "A" + outputState
     isLowercaseAlphabet := isLowercaseAlphabet &&
     		     	    @[lpBuffer + i] = "a" + outputState
     outputState := outputState + 1
  end
  if lpNumberOfBytesWritten <> 0 then
    @[lpNumberOfBytesWritten, 4] := nNumberOfBytesToWrite
  end
  eax := 1
  esp := esp + 4
  jump at caller

## FindNextFileA

replace FindNextFileA by
  caller<32> := @[esp, 4]
  hFindFile<32> := @[esp + 4, 4]
  # we ignore lpFindFileData
  assert hFindFile = 0x110a58
  # force no other file
  eax := 0
  lastError := 18
  esp := esp + 4
  jump at caller

## ReadConsoleA

replace ReadConsoleA by
  caller<32> := @[esp, 4]
  hConsoleInput<32> := @[esp + 4, 4]
  lpBuffer<32> := @[esp + 8, 4]
  nNumberOfCharsToRead<32> := @[esp + 12, 4]
  lpNumberOfCharsRead<32> := @[esp + 16, 4]
  pInputControl<32> := @[esp + 20, 4]
  # assume ReadConsoleA is only used to read in STD_INPUT_HANDLE
  assert hConsoleInput = 23
  assert pInputControl = 0
  # create a symbolic value and add a constraint to the number of read bytes
  nNumberOfBytesRead<32> := nondet
  assume 0 <= nNumberOfBytesRead <= nNumberOfCharsToRead
  for i<32> in 0 to nNumberOfBytesRead - 1 do
    # create a new symbolic byte in the byte stream bRead
    @[lpBuffer + i] := nondet as bRead
    # such that it is printable
    assume " " <= bRead <= "~"
  end
  # mimic the 'enter' keystroke
  if nNumberOfBytesRead < nNumberOfCharsToRead - 1 then
    @[lpBuffer + i] := "\r"
    nNumberOfBytesRead := nNumberOfBytesRead + 1
    if nNumberOfBytesRead < nNumberOfCharsToRead - 1 then
      @[lpBuffer + i + 1] := "\n"
      nNumberOfBytesRead := nNumberOfBytesRead + 1
    end
  end
  # write the result in the pointer passed in argument, if any
  if lpNumberOfCharsRead <> 0 then
    @[lpNumberOfCharsRead, 4] := nNumberOfBytesRead
  end
  # return a non zero value
  eax := 1
  esp := esp + 4
  jump at caller

## SetCurrentDirectoryA

replace SetCurrentDirectoryA by
  caller<32> := @[esp, 4]
  lpPathName<32> := @[esp + 4, 4]
  # assume that the directory is "Files"
  assert @[lpPathName, 6] = "Files"z
  eax := 1
  esp := esp + 4
  jump at caller

## GetLastError

replace GetLastError by
  caller<32> := @[esp, 4]
  eax := lastError
  esp := esp + 4
  jump at caller

## CreateFileA

replace CreateFileA by
  caller<32> := @[esp, 4]
  lpFileName<32> := @[esp + 4, 4]
  # we ignore dwDesiredAccess
  # we ignore dwShareMode
  # we ignore lpSecurityAttributes
  # we ignore dwCreationDisposition
  # we ignore dwFlagsAndAttributes
  hTemplateFile<32> := @[esp + 28, 4]
  assert hTemplateFile = 0
  if @[lpFileName, 29] = "latin_alphabet.txt.encrypted"z then
    eax := 0x34
  else
    assert @[lpFileName, 19] = "latin_alphabet.txt"z
    eax := 0x38
  end
  esp := esp + 4
  jump at caller

## CloseHandle

replace CloseHandle by
  caller<32> := @[esp, 4]
  # we ignore hObject
  eax := 1
  esp := esp + 4
  jump at caller

## ExitProcess

halt at ExitProcess

# Goals

reach ExitProcess such that isUppercaseAlphabet || isLowercaseAlphabet
then print ascii stream bRead