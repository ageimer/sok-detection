load sections .text, .rdata, .data from file

esp := 0x12ffb0

# Import table

@[0x402000, 4] := 0x7c811d77 as ReadFile
@[0x402004, 4] := 0x7c81ada0 as WriteFile
@[0x402008, 4] := 0x7c81902d as ExitProcess
@[0x40200c, 4] := 0x7c812f39 as GetStdHandle

# Dynamic function stubs

## Exit handler

halt at ExitProcess

## Skip handler

replace GetStdHandle, WriteFile by
  caller<32> := @[esp, 4]
  esp := esp + 4
  jump at caller

## Input Handler

# assume ReadFile is only used to read in STD_INPUT_HANDLE
replace ReadFile by
  caller<32>               := @[esp, 4]
  # we ignore the first argument hFile
  lpBuffer<32>             := @[esp + 8, 4]   # second argument in the stack
  nNumberOfBytesToRead<32> := @[esp + 12, 4]  # third argument in the stack
  lpNumberOfBytesRead<32>  := @[esp + 16, 4]  # fourth argument in the stack

  # create a symbolic value and add a constraint to the number of read bytes
  nNumberOfBytesRead<32>   := nondet
  assume 2 <= nNumberOfBytesRead <= nNumberOfBytesToRead

  # bReadConstraints will enforce read bytes to be printable
  bReadConstraints<1>      := true

  for i<32> in 0 to nNumberOfBytesRead - 3 do
    # create a new symbolic byte in the byte stream bRead
    @[lpBuffer + i] := nondet as bRead
    # such that it is printable
    bReadConstraints := bReadConstraints && " " <= bRead <= "~"
  end

  # mimic the 'enter' keystroke
  @[lpBuffer + i] := "\r"
  @[lpBuffer + i + 1] := "\n"

  # add the constraint to path state
  assume bReadConstraints

  # write the result in the pointer passed in argument, if any
  if lpNumberOfBytesRead <> 0 then
    @[lpNumberOfBytesRead, 4] := nNumberOfBytesRead
  end

  # return a non zero value
  eax := 1
  esp := esp + 4
  jump at caller


# Goals

reach WriteFile such that @[@[esp + 8, 4], 9] = "G00d j0b!"
then print ascii stream bRead

cut at WriteFile if @[@[esp + 8, 4], 35] = "N0t t00 h0t R we? 7ry 4ga1nz plzzz!"