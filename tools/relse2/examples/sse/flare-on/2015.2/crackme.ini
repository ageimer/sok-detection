# https://stackoverflow.com/questions/41090297/default-state-of-direction-flag-df-during-x86-program-execution
DF<1> := 0
esp := 0x12ffb0

# Load .text section
@[<.text>, 512] from file
# Load .data section
@[<.data>, 512] from file

# Import table

@[0x40204c, 4] := 0x7c811d77 as LoadLibraryA
@[0x402050, 4] := 0x7c81ada0 as GetProcAddress
@[0x402054, 4] := 0x7c81902d as GetLastError
@[0x402058, 4] := 0x7c812f39 as GetStdHandle
@[0x40205c, 4] := 0x7c8814f9 as AttachConsole
@[0x402060, 4] := 0x7c82cf25 as WriteConsoleA
@[0x402064, 4] := 0x7c810d87 as WriteFile
@[0x402068, 4] := 0x7c80180e as ReadFile

## Stop condition

@[esp, 4] := 0
halt at @[esp, 4]

# Dynamic function stubs

## Unsupported handler

abort at LoadLibraryA, GetProcAddress, GetLastError, AttachConsole, WriteConsoleA

## Skip handler

replace GetStdHandle, WriteFile by
  caller<32> := @[esp, 4]
  esp := esp + 4
  jump at caller

## Input Handler

# assume ReadFile is only used to read in STD_INPUT_HANDLE
replace ReadFile by
  caller<32>               := @[esp, 4]
  # we ignore the first argument hFile
  lpBuffer<32>             := @[esp + 8, 4]   # second argument in the stack
  nNumberOfBytesToRead<32> := @[esp + 12, 4]  # third argument in the stack
  lpNumberOfBytesRead<32>  := @[esp + 16, 4]  # fourth argument in the stack

  # create a symbolic value and add a constraint to the number of read bytes
  nNumberOfBytesRead<32>   := nondet
  assume 2 <= nNumberOfBytesRead <= nNumberOfBytesToRead

  # bReadConstraints will enforce read bytes to be printable
  bReadConstraints<1>      := true

  for i<32> in 0 to nNumberOfBytesRead - 3 do
    # create a new symbolic byte in the byte stream bRead
    @[lpBuffer + i] := nondet as bRead
    # such that it is printable
    bReadConstraints := bReadConstraints && " " <= bRead <= "~"
  end

  # mimic the 'enter' keystroke
  @[lpBuffer + i] := "\r"
  @[lpBuffer + i + 1] := "\n"

  # add the constraint to path state
  assume bReadConstraints

  # write the result in the pointer passed in argument, if any
  if lpNumberOfBytesRead <> 0 then
    @[lpNumberOfBytesRead, 4] := nNumberOfBytesRead
  end

  # return a non zero value
  eax := 1
  esp := esp + 4
  jump at caller

# Goals

reach WriteFile such that @[@[esp + 8, 4], 15] = "You are success"
then print ascii stream bRead

cut at WriteFile if @[@[esp + 8, 4], 15] = "You are failure"
